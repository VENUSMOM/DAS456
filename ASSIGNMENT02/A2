class Node:
    def __init__(self, data=None):
        self.data = data
        self.next = None

class SortedLinkedList:
    def __init__(self):
        self.head = None
        self.tail = None
        self.size = 0

    def insert(self, data):
        new_node = Node(data)
        if self.size == 0:
            self.head = new_node
            self.tail = new_node
        elif data <= self.head.data:
            new_node.next = self.head
            self.head = new_node
        elif data >= self.tail.data:
            self.tail.next = new_node
            self.tail = new_node
        else:
            current = self.head
            while current.next and current.next.data < data:
                current = current.next
            new_node.next = current.next
            current.next = new_node
        self.size += 1

    def remove(self, data):
        if self.size == 0:
            return False
        if self.head.data == data:
            self.head = self.head.next
            self.size -= 1
            return True
        current = self.head
        while current.next:
            if current.next.data == data:
                current.next = current.next.next
                self.size -= 1
                if current.next is None:
                    self.tail = current
                return True
            current = current.next
        return False

    def is_present(self, data):
        current = self.head
        while current:
            if current.data == data:
                return True
            current = current.next
        return False

    def __len__(self):
        return self.size
